generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId               String               @unique
  firstName            String
  lastName             String
  /// Institutional email address
  email                String               @unique
  /// Store hashed passwords only
  passwordHash         String
  role                 Role                 @default(STUDENT)
  passwordResetToken   String?              @unique
  passwordResetExpires DateTime?
  profileInfo          Json?
  /// Note: Application logic must ensure a user isn't assigned as both Advisor and Evaluator *for the same project*.: string; expertise?: string[]; bio?: string }
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  advisorRequestsMade  AdvisorRequest[]     @relation("AdvisorRequester")
  announcementsCreated Announcement[]       @relation("AnnouncementCreator")
  commitsAuthored      Commit[]             @relation("CommitAuthor")
  documentsUploaded    Document[]
  evaluationsProvided  Evaluation[]         @relation("EvaluationAuthor")
  feedbackProvided     Feedback[]           @relation("FeedbackAuthor")
  groupsLed            Group[]              @relation("GroupLeader")
  invitesCreated       GroupInvite[]        @relation("InviteCreator")
  groupsMemberOf       GroupMember[]
  mergeRequestsCreated MergeRequest[]       @relation("MergeRequestCreator")
  mergeRequestsReviews MergeRequestReview[] @relation("MergeRequestReviewer")
  notifications        Notification[]       @relation("NotificationRecipient")
  advisedProjects      Project[]            @relation("ProjectAdvisor")
  evaluatedProjects    ProjectEvaluator[]
  tasksAssigned        Task[]               @relation("TaskAssignee")
  tasksCreated         Task[]               @relation("TaskCreator")
  repositoriesOwned    Repository[]         @relation("RepositoryOwner")
  /// Each repository belongs to one user

  @@index([userId])
  @@index([email])
}

/// Represents a project group formed by students
model Group {
  groupUserName       String              @id
  name                String
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  /// ID of the student who is the group leader
  leaderId            String
  advisorRequests     AdvisorRequest[]
  leader              User                @relation("GroupLeader", fields: [leaderId], references: [userId])
  invites             GroupInvite[]
  members             GroupMember[]
  projects            Project[]           @relation("GroupProjects")
  projectRepositories ProjectRepository[]
  repositories        Repository[]        @relation("GroupOwnedRepository")

  @@index([name])
}

/// Join table for Group Members (Many-to-Many between User and Group)
model GroupMember {
  groupUserName String
  userId        String
  joinedAt      DateTime @default(now())
  group         Group    @relation(fields: [groupUserName], references: [groupUserName], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([groupUserName, userId])
  @@index([userId])
}

/// Represents a final-year project
model Project {
  id                String              @id @default(cuid())
  title             String
  description       String?
  /// Status of the project using a predefined enum
  status            ProjectStatus       @default(ACTIVE)
  isPrivate         Boolean             @default(false)
  submissionDate    DateTime?
  archived          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  groupUserName     String
  advisorId         String?
  documents         Document[]
  evaluations       Evaluation[]
  feedback          Feedback[]
  advisor           User?               @relation("ProjectAdvisor", fields: [advisorId], references: [userId])
  group             Group               @relation("GroupProjects", fields: [groupUserName], references: [groupUserName], onDelete: Cascade)
  projectEvaluators ProjectEvaluator[]
  repositories      ProjectRepository[]
  tasks             Task[]

  @@index([title])
  @@index([groupUserName])
  @@index([advisorId])
  @@index([status])
}

/// Join table for Project Evaluators (Many-to-Many between Project and User (Evaluator role))
model ProjectEvaluator {
  projectId   String
  evaluatorId String
  assignedAt  DateTime @default(now())
  evaluator   User     @relation(fields: [evaluatorId], references: [userId], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, evaluatorId])
  @@index([evaluatorId])
}

model ProjectRepository {
  projectId      String
  repositoryName String
  groupUserName  String
  assignedAt     DateTime   @default(now())
  group          Group      @relation(fields: [groupUserName], references: [groupUserName], onDelete: Cascade)
  project        Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repository     Repository @relation(fields: [repositoryName, groupUserName], references: [name, groupUserName], onDelete: Cascade)

  @@id([projectId, repositoryName, groupUserName])
  @@index([projectId])
  @@index([repositoryName])
  @@index([groupUserName])
}

/// Represents the Vec repository. Can be owned by a User (groupId=null) or a Group (groupId!=null).
model Repository {
  name          String
  description   String
  /// The User who created or primarily manages the repository
  ownerId       String
  isPrivate     Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  /// ID of the group that owns this repository
  groupUserName String
  branches      Branch[]
  commits       Commit[]
  feedback      Feedback[]
  mergeRequests MergeRequest[]
  projects      ProjectRepository[]
  remotes       Remote[]
  owner         Group               @relation("GroupOwnedRepository", fields: [groupUserName], references: [groupUserName], onDelete: Cascade)

  @@id([name, groupUserName])
  @@index([name])
  @@index([groupUserName])
  @@index([ownerId])
}

/// Represents a commit in the Vec repository
model Commit {
  id              String        @id
  message         String
  timestamp       DateTime
  createdAt       DateTime      @default(now())
  repositoryName  String
  repositoryGroup String
  authorId        String
  parentCommitIDs String[]
  /// ID of the merge request that resulted in this commit (if applicable). This is the foreign key.
  mergeRequestId  String?       @unique
  branchesHead    Branch[]      @relation("BranchHead")
  author          User          @relation("CommitAuthor", fields: [authorId], references: [userId])
  mergeRequest    MergeRequest? @relation("MergeCommit", fields: [mergeRequestId], references: [id])
  repository      Repository    @relation(fields: [repositoryName, repositoryGroup], references: [name, groupUserName], onDelete: Cascade)
  fileChanges     FileChange[]

  @@index([repositoryName, repositoryGroup])
  @@index([authorId])
  @@index([timestamp])
  @@index([mergeRequestId])
}

/// Represents a file change within a Vec commit
model FileChange {
  id                      String     @id @default(cuid())
  filePath                String
  changeType              ChangeType
  fileContentHash         String?
  previousFileContentHash String?
  commitId                String
  commit                  Commit     @relation(fields: [commitId], references: [id], onDelete: Cascade)

  @@index([commitId])
  @@index([filePath])
}

/// Represents a branch in the Vec repository
model Branch {
  id                    String         @id @default(cuid())
  name                  String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  repositoryName        String
  repositoryGroup       String
  headCommitId          String
  headCommit            Commit         @relation("BranchHead", fields: [headCommitId], references: [id])
  repository            Repository     @relation(fields: [repositoryName, repositoryGroup], references: [name, groupUserName], onDelete: Cascade)
  mergeRequestsAsSource MergeRequest[] @relation("BranchMergeRequestSource")
  mergeRequestsAsTarget MergeRequest[] @relation("BranchMergeRequestTarget")

  @@unique([repositoryName, repositoryGroup, name])
  @@index([repositoryName, repositoryGroup])
}

/// Represents a merge request (like a Pull Request)
model MergeRequest {
  id              String               @id @default(cuid())
  title           String
  description     String?
  status          MergeRequestStatus   @default(OPEN)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  repositoryName  String
  repositoryGroup String
  creatorId       String
  sourceBranchId  String
  targetBranchId  String
  mergeCommit     Commit?              @relation("MergeCommit")
  feedback        Feedback[]
  creator         User                 @relation("MergeRequestCreator", fields: [creatorId], references: [userId])
  repository      Repository           @relation(fields: [repositoryName, repositoryGroup], references: [name, groupUserName], onDelete: Cascade)
  sourceBranch    Branch               @relation("BranchMergeRequestSource", fields: [sourceBranchId], references: [id], onDelete: Cascade)
  targetBranch    Branch               @relation("BranchMergeRequestTarget", fields: [targetBranchId], references: [id], onDelete: Cascade)
  reviews         MergeRequestReview[]

  @@index([repositoryName, repositoryGroup])
  @@index([creatorId])
  @@index([status])
  @@index([sourceBranchId])
  @@index([targetBranchId])
}

/// Represents a review on a merge request (Approval/Rejection/Comments)
model MergeRequestReview {
  id             String         @id @default(cuid())
  decision       ReviewDecision
  comment        String?
  createdAt      DateTime       @default(now())
  mergeRequestId String
  reviewerId     String
  mergeRequest   MergeRequest   @relation(fields: [mergeRequestId], references: [id], onDelete: Cascade)
  reviewer       User           @relation("MergeRequestReviewer", fields: [reviewerId], references: [userId])

  @@index([mergeRequestId])
  @@index([reviewerId])
}

/// Represents a remote repository link for distributed Vec operations
model Remote {
  id              String     @id @default(cuid())
  name            String
  url             String
  createdAt       DateTime   @default(now())
  repositoryName  String
  repositoryGroup String
  repository      Repository @relation(fields: [repositoryName, repositoryGroup], references: [name, groupUserName], onDelete: Cascade)

  @@unique([repositoryName, repositoryGroup, name])
  @@index([repositoryName, repositoryGroup])
}

/// Represents a task within a project
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String
  assigneeId  String?
  creatorId   String
  priority    String     @default("MEDIUM")
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [userId])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [userId])
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
}

model Feedback {
  id              String         @id @default(cuid())
  title           String?
  content         String
  status          FeedbackStatus @default(OPEN)
  createdAt       DateTime       @default(now())
  authorId        String
  projectId       String?
  mergeRequestId  String?
  repositoryName  String?
  repositoryGroup String?
  author          User           @relation("FeedbackAuthor", fields: [authorId], references: [userId])
  mergeRequest    MergeRequest?  @relation(fields: [mergeRequestId], references: [id], onDelete: Cascade)
  project         Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repository      Repository?    @relation(fields: [repositoryName, repositoryGroup], references: [name, groupUserName], onDelete: Cascade)

  @@index([authorId])
  @@index([projectId])
  @@index([mergeRequestId])
  @@index([repositoryName, repositoryGroup])
}

/// Represents a document uploaded for a project
model Document {
  id           String   @id @default(cuid())
  title        String
  content      String?
  type         String?
  url          String
  size         Int?
  category     String   @default("general")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  uploadedById String?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User?    @relation(fields: [uploadedById], references: [userId])

  @@index([projectId])
  @@index([uploadedById])
  @@index([category])
}

/// Represents an evaluation submitted for a project
model Evaluation {
  id           String   @id @default(cuid())
  score        Float?
  comments     String
  /// Store specific criteria scores/comments as JSON
  criteriaData Json?
  createdAt    DateTime @default(now())
  authorId     String
  projectId    String
  author       User     @relation("EvaluationAuthor", fields: [authorId], references: [userId])
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([projectId])
}

/// Represents notifications sent to users
model Notification {
  id          String   @id @default(cuid())
  message     String
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  recipientId String
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [userId], onDelete: Cascade)

  @@index([recipientId])
  @@index([read])
}

/// Represents a student group's request for an advisor
model AdvisorRequest {
  id                 String               @id @default(cuid())
  status             AdvisorRequestStatus @default(PENDING)
  requestMessage     String?
  responseMessage    String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  projectId          String
  groupUserName      String
  requestedAdvisorId String
  group              Group                @relation(fields: [groupUserName], references: [groupUserName], onDelete: Cascade)
  requestedAdvisor   User                 @relation("AdvisorRequester", fields: [requestedAdvisorId], references: [userId], onDelete: Cascade)

  @@index([groupUserName])
  @@index([requestedAdvisorId])
  @@index([status])
}

/// Represents an invitation to join a group
model GroupInvite {
  id            String    @id @default(cuid())
  code          String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  usedAt        DateTime?
  createdById   String
  groupUserName String
  email         String?
  createdBy     User      @relation("InviteCreator", fields: [createdById], references: [userId], onDelete: Cascade)
  group         Group     @relation(fields: [groupUserName], references: [groupUserName], onDelete: Cascade)

  @@index([code])
  @@index([groupUserName])
  @@index([email])
  @@index([expiresAt])
}

/// Represents system-wide announcements created by administrators
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  active    Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String
  creator   User     @relation("AnnouncementCreator", fields: [creatorId], references: [userId])

  @@index([creatorId])
  @@index([active, createdAt(sort: Desc)])
  @@index([priority])
}

/// System-wide rules and configuration settings. Assumed to be a singleton table (only one row).
model Rule {
  id                        Int       @id @default(1)
  maxGroupSize              Int       @default(5)
  advisorRequestDeadline    DateTime?
  projectSubmissionDeadline DateTime?
  updatedAt                 DateTime  @updatedAt
}

enum Role {
  STUDENT
  ADVISOR
  EVALUATOR
  ADMINISTRATOR
}

enum ProjectStatus {
  ACTIVE
  SUBMITTED
  COMPLETED
  ARCHIVED
}

enum AdvisorRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MergeRequestStatus {
  OPEN
  APPROVED
  REJECTED
  MERGED
  CLOSED
}

enum ReviewDecision {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  COMMENTED
}

enum ChangeType {
  ADDED
  MODIFIED
  DELETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum FeedbackStatus {
  OPEN
  ADDRESSED
  CLOSED
}

/// Represents the status of feedback
enum FeedbackStatus {
  OPEN
  CLOSED
}
