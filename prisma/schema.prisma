// datasource block specifies the database connection details
datasource db {
  provider = "postgresql" // Specifies the database provider (PostgreSQL)
  url      = env("DATABASE_URL") // Database connection URL from environment variables
}

// generator block specifies the Prisma client generator
generator client {
  provider = "prisma-client-js" // Generates Prisma Client for JavaScript/TypeScript
}

// generator block for generating JSON types (optional but useful)
generator json {
  provider = "prisma-json-types-generator"
}

// -----------------------------------------------------
// Core Models (User, Group, Project)
// -----------------------------------------------------

/// Represents a user in the system (Student, Advisor, Evaluator, Admin)
model User {
  id                   String    @id @default(cuid())
  /// Unique identifier for the user (e.g., student ID, staff ID)
  username             String    @unique
  firstName            String
  lastName             String
  /// Institutional email address
  email                String    @unique
  /// Store hashed passwords only
  passwordHash         String
  role                 Role      @default(STUDENT)
  emailVerified        Boolean   @default(false)
  verificationToken    String?   @unique
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  /// For additional info like advisor expertise, department, etc. Stored as JSON.
  profileInfo          Json?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // --- Relations ---
  advisorRequestsMade  AdvisorRequest[]     @relation("AdvisorRequester")
  announcementsCreated Announcement[]       @relation("AnnouncementCreator")
  commitsAuthored      Commit[]             @relation("CommitAuthor")
  evaluationsProvided  Evaluation[]         @relation("EvaluationAuthor")
  feedbackProvided     Feedback[]           @relation("FeedbackAuthor")
  groupsLed            Group[]              @relation("GroupLeader")
  groupsMemberOf       GroupMember[]
  invitesCreated       GroupInvite[]        @relation("InviteCreator")
  mergeRequestsCreated MergeRequest[]       @relation("MergeRequestCreator")
  mergeRequestsReviews MergeRequestReview[] @relation("MergeRequestReviewer")
  notifications        Notification[]       @relation("NotificationRecipient")
  advisedProjects      Project[]            @relation("ProjectAdvisor")
  evaluatedProjects    ProjectEvaluator[]
  tasksAssigned        Task[]               @relation("TaskAssignee")
  tasksCreated         Task[]               @relation("TaskCreator")
  repositoriesOwned    Repository[]         @relation("RepositoryOwner")

  @@index([username]) // Index for faster username lookups
  @@index([email])    // Index for faster email lookups
}

/// Represents a project group formed by students
model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /// ID of the student who is the group leader
  leaderId    String

  // --- Relations ---
  leader          User              @relation("GroupLeader", fields: [leaderId], references: [id], onDelete: Restrict)
  members         GroupMember[]
  project         Project?
  invites         GroupInvite[]
  advisorRequests AdvisorRequest[]
  repositories    Repository[]      // Group can have multiple repositories
  projectRepositories ProjectRepository[] // Repositories linked to projects

  @@index([name]) // Index for faster group name lookups
}

/// Join table for Group Members (Many-to-Many between User and Group)
model GroupMember {
  groupId  String
  userId   String
  joinedAt DateTime @default(now())

  // --- Relations ---
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@index([userId])
}

/// Represents a final-year project
model Project {
  id             String        @id @default(cuid())
  title          String
  description    String?
  /// Status of the project using a predefined enum
  status         ProjectStatus @default(ACTIVE)
  submissionDate DateTime?
  archived       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  /// Each project belongs to one group
  groupId        String        @unique
  /// Assigned advisor ID (optional)
  advisorId      String?
  /// To store milestones, deadlines, or other structured project data
  milestones     Json?

  // --- Relations ---
  group             Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  advisor           User?              @relation("ProjectAdvisor", fields: [advisorId], references: [id], onDelete: SetNull)
  evaluations       Evaluation[]
  feedback          Feedback[]
  projectEvaluators ProjectEvaluator[]
  tasks             Task[]
  repositories      ProjectRepository[] // Many-to-many relation with Repository via join table

  @@index([title])
  @@index([advisorId])
  @@index([status])
}

/// Join table for Project Evaluators (Many-to-Many between Project and User (Evaluator role))
model ProjectEvaluator {
  projectId   String
  evaluatorId String
  assignedAt  DateTime @default(now())

  // --- Relations ---
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  evaluator User    @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)

  @@id([projectId, evaluatorId])
  @@index([evaluatorId])
}

/// Join table for Project and Repository (Many-to-Many relationship)
model ProjectRepository {
  projectId    String
  repositoryId String
  assignedAt   DateTime @default(now())

  // --- Relations ---
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade) // Ensure repository belongs to project's group
  groupId    String     // Added to enforce group consistency

  @@id([projectId, repositoryId])
  @@index([projectId])
  @@index([repositoryId])
  @@index([groupId])
}

// -----------------------------------------------------
// Version Control (Vec) Models
// -----------------------------------------------------

/// Represents the Vec repository for a group
model Repository {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String

  // --- Relations ---
  owner         User              @relation("RepositoryOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  group         Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  branches      Branch[]
  commits       Commit[]
  mergeRequests MergeRequest[]
  remotes       Remote[]
  feedback      Feedback[]
  projects      ProjectRepository[] // Many-to-many relation with Project via join table

  @@unique([ownerId, name])
  @@index([name])
  @@index([groupId])
}

/// Represents a commit in the Vec repository
model Commit {
  id              String     @id
  message         String
  timestamp       DateTime
  createdAt       DateTime   @default(now())
  repositoryId    String
  authorId        String
  parentCommitIDs String[]
  /// ID of the merge request that resulted in this commit (if applicable). Must be unique for the one-to-one relation.
  mergeRequestId  String?    @unique

  // --- Relations ---
  repository   Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  author       User          @relation("CommitAuthor", fields: [authorId], references: [id], onDelete: Restrict)
  mergeRequest MergeRequest? @relation("MergeCommit", fields: [mergeRequestId], references: [id], onDelete: SetNull)
  fileChanges  FileChange[]
  branchesHead Branch[]      @relation("BranchHead")

  @@index([repositoryId])
  @@index([authorId])
  @@index([timestamp])
}

/// Represents a file change within a Vec commit
model FileChange {
  id                      String     @id @default(cuid())
  filePath                String
  changeType              ChangeType
  fileContentHash         String?
  previousFileContentHash String?
  commitId                String

  // --- Relations ---
  commit Commit @relation(fields: [commitId], references: [id], onDelete: Cascade)

  @@index([commitId])
  @@index([filePath])
}

/// Represents a branch in the Vec repository
model Branch {
  id           String   @id @default(cuid())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  repositoryId String
  headCommitId String

  // --- Relations ---
  repository            Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  headCommit            Commit         @relation("BranchHead", fields: [headCommitId], references: [id], onDelete: Restrict)
  mergeRequestsAsSource MergeRequest[] @relation("BranchMergeRequestSource")
  mergeRequestsAsTarget MergeRequest[] @relation("BranchMergeRequestTarget")

  @@unique([repositoryId, name])
  @@index([repositoryId])
}

/// Represents a merge request (like a Pull Request)
model MergeRequest {
  id             String             @id @default(cuid())
  title          String
  description    String?
  status         MergeRequestStatus @default(OPEN)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  repositoryId   String
  creatorId      String
  sourceBranchId String
  targetBranchId String

  // --- Relations ---
  repository   Repository           @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  creator      User                 @relation("MergeRequestCreator", fields: [creatorId], references: [id], onDelete: Restrict)
  sourceBranch Branch               @relation("BranchMergeRequestSource", fields: [sourceBranchId], references: [id], onDelete: Cascade)
  targetBranch Branch               @relation("BranchMergeRequestTarget", fields: [targetBranchId], references: [id], onDelete: Cascade)
  reviews      MergeRequestReview[]
  feedback     Feedback[]
  mergeCommit  Commit?              @relation("MergeCommit")

  @@index([repositoryId])
  @@index([creatorId])
  @@index([status])
  @@index([sourceBranchId])
  @@index([targetBranchId])
}

/// Represents a review on a merge request (Approval/Rejection/Comments)
model MergeRequestReview {
  id             String         @id @default(cuid())
  decision       ReviewDecision
  comment        String?
  createdAt      DateTime       @default(now())
  mergeRequestId String
  reviewerId     String

  // --- Relations ---
  mergeRequest MergeRequest @relation(fields: [mergeRequestId], references: [id], onDelete: Cascade)
  reviewer     User         @relation("MergeRequestReviewer", fields: [reviewerId], references: [id], onDelete: Restrict)

  @@index([mergeRequestId])
  @@index([reviewerId])
}

/// Represents a remote repository link for distributed Vec operations
model Remote {
  id           String   @id @default(cuid())
  name         String
  url          String
  createdAt    DateTime @default(now())
  repositoryId String

  // --- Relations ---
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, name])
  @@index([repositoryId])
}

// -----------------------------------------------------
// Project Management & Communication Models
// -----------------------------------------------------

/// Represents a task within a project
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String
  assigneeId  String?
  creatorId   String

  // --- Relations ---
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User    @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Restrict)

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
}

/// Represents feedback provided on a project, merge request, or repository.
/// IMPORTANT: Application logic must ensure that for each Feedback record,
/// exactly ONE of projectId, mergeRequestId, or repositoryId is set.
model Feedback {
  id             String         @id @default(cuid())
  title          String
  content        String
  status         FeedbackStatus @default(OPEN)
  createdAt      DateTime       @default(now())
  authorId       String
  projectId      String?
  mergeRequestId String?
  repositoryId   String?

  // --- Relations ---
  author       User         @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: Restrict)
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  mergeRequest MergeRequest? @relation(fields: [mergeRequestId], references: [id], onDelete: Cascade)
  repository   Repository?  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([projectId])
  @@index([mergeRequestId])
  @@index([repositoryId])
}

/// Represents an evaluation submitted for a project
model Evaluation {
  id           String   @id @default(cuid())
  score        Float?
  comments     String
  criteriaData Json?
  createdAt    DateTime @default(now())
  authorId     String
  projectId    String

  // --- Relations ---
  author  User    @relation("EvaluationAuthor", fields: [authorId], references: [id], onDelete: Restrict)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([projectId])
}

/// Represents notifications sent to users
model Notification {
  id          String   @id @default(cuid())
  message     String
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  recipientId String

  // --- Relations ---
  recipient User @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([read])
}

/// Represents a student group's request for an advisor
model AdvisorRequest {
  id                 String               @id @default(cuid())
  status             AdvisorRequestStatus @default(PENDING)
  requestMessage     String?
  responseMessage    String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  groupId            String
  requestedAdvisorId String

  // --- Relations ---
  group            Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  requestedAdvisor User  @relation("AdvisorRequester", fields: [requestedAdvisorId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([requestedAdvisorId])
  @@index([status])
}

/// Represents an invitation to join a group
model GroupInvite {
  id          String   @id @default(cuid())
  code        String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  usedAt      DateTime?
  createdById String
  groupId     String
  email       String?

  // --- Relations ---
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy User  @relation("InviteCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([groupId])
  @@index([expiresAt])
}

// -----------------------------------------------------
// System & Configuration Models
// -----------------------------------------------------

/// Represents system-wide announcements created by administrators
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  active    Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String

  // --- Relations ---
  creator User @relation("AnnouncementCreator", fields: [creatorId], references: [id], onDelete: Restrict)

  @@index([creatorId])
  @@index([active])
  @@index([priority])
  @@index([createdAt])
}

/// System-wide rules and configuration settings. Assumed to be a singleton table.
model Rule {
  id                        Int      @id @default(1)
  maxGroupSize              Int      @default(5)
  advisorRequestDeadline    DateTime
  projectSubmissionDeadline DateTime
  updatedAt                 DateTime @updatedAt
}

// -----------------------------------------------------
// Enums
// -----------------------------------------------------

enum Role {
  STUDENT
  ADVISOR
  EVALUATOR
  ADMINISTRATOR
}

enum ProjectStatus {
  ACTIVE
  SUBMITTED
  COMPLETED
  ARCHIVED
}

enum AdvisorRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MergeRequestStatus {
  OPEN
  APPROVED
  REJECTED
  MERGED
  CLOSED
}

enum ReviewDecision {
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  COMMENTED
}

enum ChangeType {
  ADDED
  MODIFIED
  DELETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum FeedbackStatus {
  OPEN
  ADDRESSED
  CLOSED
}